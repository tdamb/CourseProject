name: Build, Push and Deploy Docker images to ECR and ECS
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
permissions:
  contents: read
  id-token: write
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set the Date-Time Tag
        run: echo "DATETIME=$(date '+prod-%Y-%m-%d-%H-%M')" >> $GITHUB_ENV

      - name: Determine Change Path
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files: $CHANGED_FILES"
          if [[ "$CHANGED_FILES" =~ "frontend/" ]] || [[ "$CHANGED_FILES" =~ "backend/" ]]; then
            echo "CODE_CHANGED=true" >> $GITHUB_ENV
          else
            echo "CODE_CHANGED=false" >> $GITHUB_ENV
          fi
          echo "Code changed: $CHANGED_FILES"
      - name: Debug CODE_CHANGED
        run: echo "CODE_CHANGED is set to '${{ env.CODE_CHANGED }}'"

      - name: Fetch Latest Image Tags
        if: env.CODE_CHANGED == 'false'
        run: |
          echo "Listing all image tags in the repository..."
          aws ecr describe-images --repository-name ${{ secrets.ECR_REPOSITORY }} --query 'imageDetails[*].imageTags' --output json

          echo "Fetching frontend image tag..."
          FRONTEND_IMAGE_TAGS=$(aws ecr describe-images --repository-name ${{ secrets.ECR_REPOSITORY }} --query 'imageDetails[*].imageTags[]' --output text)
          FRONTEND_IMAGE_TAG=$(echo "$FRONTEND_IMAGE_TAGS" | tr '\t' '\n' | grep -E '^frontend-prod-' | sort | tail -n 1)
          FRONTEND_IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${FRONTEND_IMAGE_TAG}"

          echo "Fetching backend image tag..."
          BACKEND_IMAGE_TAGS=$(aws ecr describe-images --repository-name ${{ secrets.ECR_REPOSITORY }} --query 'imageDetails[*].imageTags[]' --output text)
          BACKEND_IMAGE_TAG=$(echo "$BACKEND_IMAGE_TAGS" | tr '\t' '\n' | grep -E '^backend-prod-' | sort | tail -n 1)
          BACKEND_IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${BACKEND_IMAGE_TAG}"

          echo "Fetched frontend image URI: $FRONTEND_IMAGE_URI"
          echo "Fetched backend image URI: $BACKEND_IMAGE_URI"

          echo "TF_VAR_frontend_image_uri=${FRONTEND_IMAGE_URI:-none}" >> $GITHUB_ENV
          echo "TF_VAR_backend_image_uri=${BACKEND_IMAGE_URI:-none}" >> $GITHUB_ENV

      - name: Build and push Frontend Docker image
        if: env.CODE_CHANGED == 'true'
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          FRONTEND_IMAGE_TAG="$ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:frontend-${{ env.DATETIME }}"
          docker build -t $FRONTEND_IMAGE_TAG ./frontend
          docker push $FRONTEND_IMAGE_TAG
          echo "FRONTEND_IMAGE_URI=$FRONTEND_IMAGE_TAG" >> $GITHUB_ENV

      - name: Build and push Backend Docker image
        if: env.CODE_CHANGED == 'true'
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          BACKEND_IMAGE_TAG="$ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:backend-${{ env.DATETIME }}"
          docker build -t $BACKEND_IMAGE_TAG ./backend
          docker push $BACKEND_IMAGE_TAG
          echo "BACKEND_IMAGE_URI=$BACKEND_IMAGE_TAG" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Initialize Terraform
        run: terraform init
        working-directory: ./infrastructure

      - name: Apply Specific Terraform Configuration
        if: env.CODE_CHANGED == 'false'
        env:
          FRONTEND_IMAGE_URI: ${{ env.TF_VAR_frontend_image_uri }}
          BACKEND_IMAGE_URI: ${{ env.TF_VAR_backend_image_uri }}
        run: |
          terraform apply -auto-approve \
           -var="frontend_image_uri=${FRONTEND_IMAGE_URI}" \
           -var="backend_image_uri=${BACKEND_IMAGE_URI}" \
           -target=aws_launch_template.ecs_instance \
           -target=aws_ecs_task_definition.CA_Project
        working-directory: ./infrastructure

      - name: Pre-Deployment Capacity Check
        run: |
          CURRENT_CAPACITY=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "terraform-20240709181605878000000001" --query 'AutoScalingGroups[0].DesiredCapacity' --output text)
          if [[ "$CURRENT_CAPACITY" -lt 3 ]]; then
            echo "Scaling up the ASG"
            aws autoscaling set-desired-capacity --auto-scaling-group-name "terraform-20240709181605878000000001" --desired-capacity $(($CURRENT_CAPACITY + 1))
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Wait for EC2 Instances to be Ready
        run: |
          echo "Waiting for new EC2 instances tagged with CA_Project_Deployment to be fully operational..."
          while : ; do
            INSTANCE_STATUS=$(aws ec2 describe-instances \
              --filters "Name=tag:DeploymentTag,Values=CA_Project_Deployment" \
                        "Name=instance-state-name,Values=running" \
              --query 'Reservations[*].Instances[*].[InstanceId, State.Name]' --output text)
            if [[ -n "$INSTANCE_STATUS" ]]; then
              echo "Newly launched instances are ready. We will wait 90 seconds"
              sleep 90
              break
            else
              echo "Newly launched instances are not ready yet, waiting..."
              sleep 30
            fi
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Apply Terraform Configuration
        run: |
          terraform apply -auto-approve \
            -var="frontend_image_uri=${{ env.FRONTEND_IMAGE_URI }}" \
            -var="backend_image_uri=${{ env.BACKEND_IMAGE_URI }}"
        working-directory: ./infrastructure

      - name: Post-Deployment Scaling Down
        run: |
          CURRENT_CAPACITY=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "terraform-20240709181605878000000001" --query 'AutoScalingGroups[0].DesiredCapacity' --output text)
          if [[ "$CURRENT_CAPACITY" -gt 2 ]]; then
            echo "Scaling down the ASG"
            aws autoscaling set-desired-capacity --auto-scaling-group-name "terraform-20240709181605878000000001" --desired-capacity $(($CURRENT_CAPACITY - 1))
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
