name: Startup Workflow
on:
  workflow_dispatch:

jobs:
  startup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Remove dynamic deployment_tag setting
      # - name: Set Deployment Tag
      #   run: echo "DEPLOYMENT_TAG=deployment-${{ github.run_id }}-${{ github.run_attempt }}" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fetch Latest Image Tags
        run: |
          echo "Fetching latest frontend and backend image tags..."
          FRONTEND_IMAGE_TAGS=$(aws ecr describe-images --repository-name ${{ secrets.ECR_REPOSITORY }} --query 'imageDetails[*].imageTags[]' --output text)
          FRONTEND_IMAGE_TAG=$(echo "$FRONTEND_IMAGE_TAGS" | tr '\t' '\n' | grep -E '^frontend-prod-' | sort | tail -n 1)
          FRONTEND_IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${FRONTEND_IMAGE_TAG}"

          BACKEND_IMAGE_TAGS=$(aws ecr describe-images --repository-name ${{ secrets.ECR_REPOSITORY }} --query 'imageDetails[*].imageTags[]' --output text)
          BACKEND_IMAGE_TAG=$(echo "$BACKEND_IMAGE_TAGS" | tr '\t' '\n' | grep -E '^backend-prod-' | sort | tail -n 1)
          BACKEND_IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${BACKEND_IMAGE_TAG}"

          echo "Fetched frontend image URI: $FRONTEND_IMAGE_URI"
          echo "Fetched backend image URI: $BACKEND_IMAGE_URI"

          echo "TF_VAR_frontend_image_uri=${FRONTEND_IMAGE_URI:-none}" >> $GITHUB_ENV
          echo "TF_VAR_backend_image_uri=${BACKEND_IMAGE_URI:-none}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Initialize Terraform
        run: terraform init
        working-directory: ./infrastructure

      - name: Apply ASG Terraform Configuration
        run: |
          terraform apply -auto-approve \
            -target=aws_autoscaling_group.ecs_asg \
            -var='asg_min_size=1' \
            -var='asg_max_size=3' \
            -var='asg_desired_capacity=1'
        working-directory: ./infrastructure

      - name: Wait for EC2 Instances to be Ready
        run: |
          echo "Waiting for new EC2 instances tagged with CA_Project_Deployment to be fully operational..."
          while : ; do
            INSTANCE_IDS=$(aws ec2 describe-instances \
              --filters "Name=tag:DeploymentTag,Values=CA_Project_Deployment" \
                        "Name=instance-state-name,Values=running" \
              --query 'Reservations[*].Instances[*].InstanceId' --output text)
            
            if [ -z "$INSTANCE_IDS" ]; then
              echo "No instances found with the tag CA_Project_Deployment. Waiting..."
              sleep 30
              continue
            fi
            
            INSTANCE_STATUS=$(aws ec2 describe-instance-status \
              --instance-ids $INSTANCE_IDS \
              --query 'InstanceStatuses[*].[SystemStatus.Status, InstanceStatus.Status]' --output text)
            
            if echo "$INSTANCE_STATUS" | grep -q -E 'ok[[:space:]]+ok'; then
              echo "Newly launched instances are healthy."
              break
            else
              echo "Newly launched instances are not healthy yet, waiting..."
              sleep 30
            fi
          done

      - name: Apply Full Terraform Configuration
        run: |
          terraform apply -auto-approve \
            -var='ecs_desired_count=1' \
            -var="frontend_image_uri=${{ env.TF_VAR_frontend_image_uri }}" \
            -var="backend_image_uri=${{ env.TF_VAR_backend_image_uri }}"
        working-directory: ./infrastructure
